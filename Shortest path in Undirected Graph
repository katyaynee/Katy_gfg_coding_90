class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
        for(int i=0;i<n;i++)
		{
		    adj.add(new ArrayList<Integer>());
		}
		
		for(int i=0;i<m;i++)
		{
		    int u=edges[i][0];
		    int v=edges[i][1];
		    adj.get(u).add(v);
		    adj.get(v).add(u);
		}
		
		Queue<Integer> q=new LinkedList<>();
		q.add(src);
		
	    int[] dis=new int[n];
	    
	    for(int i=0;i<n;i++)
	    {
	        dis[i]=(int)1e9;
	    }
	    
		dis[src]=0;
		while(!q.isEmpty())
		{
		    int node=q.remove();
		  
		    for(int it:adj.get(node))
		    {
		        if(dis[node]+1< dis[it])
		        {
		           dis[it]=dis[node]+1;
		          q.add(it);
		        }
		    }
		}
		for(int i=0;i<n;i++)
	    {
	        if(dis[i]==1e9)
	          dis[i]=-1;
	    }
	    
		
	return dis;
		
    }
}

