/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null)
        return 0;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(root,0));
         
         int ans=0;
         int first, last;
        while(!q.isEmpty())
        {
            int size=q.size();
            int min=q.peek().index;
            first=0;
            last=0;
            for(int i=0;i<size;i++)
            {
                Pair temp=q.remove();
                // TreeNode node=temp.node;
                int nodeIndex=temp.index-min;
                
                if(i==0)
                first=nodeIndex;

                  
                if(i==size-1)
                last = nodeIndex;
               
                if(temp.node.left!=null)
                q.add(new Pair(temp.node.left,2*nodeIndex+1));

                if(temp.node.right!=null)
                q.add(new Pair(temp.node.right,2*nodeIndex+2));

            }

            ans=Math.max(ans,last-first+1);
        }

        return ans;



    }
}


 class Pair{
    TreeNode node;
    int  index;

    Pair(TreeNode node,int index)
    {
        this.node=node;
        this.index=index;
    }
    }
