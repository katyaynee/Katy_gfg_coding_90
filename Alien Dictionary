class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        for(int i=0;i<K;i++)
        {
            adj.add(new ArrayList<Integer>());
        }
        
        for(int i=0;i<N-1;i++)
        {
            String s1= dict[i];
            String s2= dict[i+1];
            
            int len=Math.min(s1.length(),s2.length());
            
            for(int p=0;p<len;p++)
            {
                if(s1.charAt(p)!=s2.charAt(p))
                {
                adj.get(s1.charAt(p)- 'a').add(s2.charAt(p)-'a');
                break;
                }
                   
            }
        }
        
        
        int[] topo= topoSort(K,adj);
        
        String ans="";
        for(int i=0;i<topo.length;i++)
        {
            ans=ans+(char)(topo[i]+(int)('a'));
        }
        
        return ans;
        
    }
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] vis=new int[V];
        
         for(int i=0;i<V;i++)
         {
             vis[i]=0;
         }
        
        Stack<Integer> stk=new Stack<>();
        for(int i=0;i<V;i++)
        {
            if(vis[i]==0)
              dfs(i,V, adj,stk,vis);
        }
        
        int[] ans= new int[V];
         int i=0;
        while(!stk.isEmpty())
        {
           
            ans[i]=stk.pop();
            i++;
        }
        
        return ans;
    }
    static void dfs(int src,int V, ArrayList<ArrayList<Integer>> adj,Stack<Integer> stk,int[] vis) 
    {
       vis[src]=1;
       
       for(int it:adj.get(src))
       {
           if(vis[it]!=1)
           {
              dfs(it,V,adj,stk,vis);
           }
       }
       stk.push(src);
    }
}
