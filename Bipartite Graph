

class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here

        int[] color=new int[V];

        for(int i=0;i<V;i++)
        color[i]=-1;

        for(int i=0;i<V;i++)
        {
            if(color[i]==-1)
            {
                 if(bfs(i,adj,V,color)==false)
                  return false;
            }
        }
            return true;
            
    }
    
     public boolean bfs(int src,ArrayList<ArrayList<Integer>>adj,int n,int[] color)
    {

        Queue<Integer> q= new LinkedList<>();
        q.add(src);
        color[src]=1;

        while(!q.isEmpty())
        {
            int node=q.poll();
            
            for(int it: adj.get(node))
            {
                if(color[it]==-1)
                {
                    color[it]=1-color[node];
                    q.add(it);
                }
                else if(color[it]==color[node])
                return false;
            }



        }

   return true;
    }
}
