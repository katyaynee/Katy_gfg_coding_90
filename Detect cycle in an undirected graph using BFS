

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int[] vis=new int[V];
        
        for(int i=0;i<V;i++)
        vis[i]=0;
        
        
        for(int i=0;i<V;i++)
        {
            if(vis[i]==0)
             {if(detectCycle(i,vis,adj)==true)
             return true;
             }
            
        }
        return false;
    }
    
     public boolean detectCycle(int src,int[] vis, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(src,-1));
        vis[src]=1;
        
        
        while(!q.isEmpty())
        {
            Pair pair=q.remove();
            int node=pair.node;
            int parent=pair.parent;
            
           for(int it: adj.get(node))
              {
            
            if(vis[it]==0)
              {
                vis[it]=1;
                q.add(new Pair(it,node));
              }
              
              else if(parent!=it)
               return true;
              }
              
          
        }
            return false;
        }
    
}

class Pair{
    
    int node;
    int parent;
    
    Pair(int node,int parent)
    {
        this.node=node;
        this.parent=parent;
    }
}
