Solution 1: Iterative - level order

class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/
class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
      Queue<Node> q= new LinkedList<>();
      ArrayList<Integer> al=new ArrayList<>();
    if (root==null)
    return al;
    
      q.add(root);
      
      while(!q.isEmpty())
      {
          int size=q.size();
          
          for(int i=0;i<size;i++)
          {
             Node temp=q.remove();
              
             if(i==0)
             al.add(temp.data);
              
              
              if(temp.left!=null)
              q.add(temp.left);
              
              if(temp.right!=null)
              q.add(temp.right);
              
          }
      }
       
     
      return al;
    }
}



Solution 2: Recursive




class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
       ArrayList<Integer> ans= new ArrayList<>();
       
       if (root==null)
       return ans;
       
       findLeftView(root,0,ans);
       return ans;
    }
    
    void findLeftView(Node root,int level,ArrayList<Integer> ans)
    {
        if(root==null)
        return;
        
        if(level==ans.size())
        ans.add(root.data);
        
        findLeftView(root.left,level+1,ans);
        findLeftView(root.right,level+1,ans);
        
    }
}


