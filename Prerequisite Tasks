class Solution {
    public boolean isPossible(int N,int P, int[][] prerequisites)
    {
        // Your Code goes here
        
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
        for(int i=0;i<N;i++)
        {adj.add(new ArrayList<>());
            
        }
        
        for(int i=0;i<P;i++)
         adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        
         int indegree[] =new int[N];
        
        
         
         
         for(int i=0;i<N;i++)
         {
            for(int it: adj.get(i)) 
            {
                indegree[it]++;
            }
         }
         
         Queue<Integer> q=new LinkedList<>();
        int topoCount=0;
        
         for(int i=0;i<N;i++)
         {
             if(indegree[i]==0)
             q.add(i);
         }
         int c=0;
         while(!q.isEmpty()) 
         {
             int node= q.remove();
            topoCount++;
             for(int it:adj.get(node))
             {
                 indegree[it]--;
                 if(indegree[it]==0)
                 q.add(it);
             }
         }
       if(topoCount==N)
       return true;
       else 
       return false;
     
    }
    
    }
    
